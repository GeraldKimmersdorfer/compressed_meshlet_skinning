#version 460
#extension GL_GOOGLE_include_directive	 	 : require
#extension GL_EXT_shader_16bit_storage   : require
#extension GL_EXT_shader_8bit_storage    : require
#extension GL_EXT_nonuniform_qualifier   : require
#extension GL_EXT_scalar_block_layout 	 : enable

#include "include/mcc.glsl"

#define MCC_MESHLET_EXTENSION _EXT 		// possible values: _NV,_EXT
#define MCC_MESHLET_TYPE _NATIVE 		// possible values: _NATIVE, _REDIR
#define MCC_VERTEX_COMPRESSION _NOCOMP 	// possible values: _NOCOMP, _LUT

#if MCC_MESHLET_EXTENSION == _EXT
#extension GL_EXT_mesh_shader            : require
#elif MCC_MESHLET_EXTENSION == _NV
#extension GL_NV_mesh_shader             : require
#endif

//#extension GL_EXT_debug_printf : enable	//ToDo: Necessary?

#include "include/glsl_helpers.glsl"
#include "include/shared_structs.glsl"
#include "include/vertex_reconstruction.glsl"

layout (constant_id = 0) const uint NUM_TASK_SHADER_INVOCATIONS = 1; // <- Expected to be set to 32 for Nvidia on host side.
layout (constant_id = 1) const uint NUM_MESH_SHADER_INVOCATIONS = 1; // <- Expected to be set to 32 for Nvidia on host side.
layout(local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;
// The max_vertices and max_primitives numbers have been recommended by Nvidia:
layout(triangles, max_vertices = 64, max_primitives = 126) out;

#if MCC_MESHLET_EXTENSION == _EXT
taskPayloadSharedEXT uint meshletIndices[NUM_TASK_SHADER_INVOCATIONS];
#elif MCC_MESHLET_EXTENSION == _NV
in taskNV block { uint meshletIndices[NUM_TASK_SHADER_INVOCATIONS];  };
#endif

layout(set = 0, binding = 1) uniform CameraBuffer { camera_data camera; };
layout(set = 2, binding = 0) buffer BoneTransformBuffer { bone_data bones[]; };

#if MCC_MESHLET_TYPE == _NATIVE
layout(set = 4, binding = 0, scalar) buffer MeshletsBuffer { meshlet_native meshlets[]; };
#elif MCC_MESHLET_TYPE == _REDIR
layout(set = 4, binding = 0, scalar) buffer MeshletsBuffer { meshlet_redirected meshlets[]; };
layout(std430, set = 4, binding = 2) buffer PackedIndexBuffer { uint mPackedIndices[]; };
#endif

#if MCC_MESHLET_EXTENSION == _EXT && MCC_MESHLET_TYPE == _REDIR
layout(std430, set = 4, binding = 2) buffer PackedIndexBuffer_u8 { uint8_t mPackedIndices_u8[]; };
#endif
layout(set = 4, binding = 1) buffer MeshBuffer { mesh_data meshes[]; };

// Mesh shader output block:
layout (location = 0) out PerVertexData
{
	vec3 positionWS;
	vec3 normalWS;
	vec2 texCoord;
	flat int materialIndex;
	flat vec3 color;
} v_out[];

#if MCC_MESHLET_EXTENSION == _EXT && MCC_MESHLET_TYPE == _NATIVE
// NOTE: The uints are stored in big endian!!! (maybe platform dependent)
uint getItemFromPackedIndexArray(uint u8index, uint meshletIndex) {
	uint block = meshlets[meshletIndex].mIndicesPacked[int(u8index / 4.0)];
	#if DEBUG
		//debugPrintfEXT("requested block %u | u8index %u \n", block, u8index);
	#endif
	switch (u8index % 4) {
		case 3: return (block >> 24u);
		case 2: return (block >> 16u) & 0xFF;
		case 1: return (block >> 8u) & 0xFF;
		case 0: return (block) & 0xFF;
	}
}
#endif

void main() 
{
	uint meshletIndex = meshletIndices[gl_WorkGroupID.x];
	uint invocationId = gl_LocalInvocationID.x;

	// Get all the meshlet data:
	uint meshIndex 			  = (meshlets[meshletIndex].mMeshIdxVcTc & 0xFFFFC000) >> 18u;
	uint vertexCount          = (meshlets[meshletIndex].mMeshIdxVcTc & 0x00003F80) >> 7u;
	uint triangleCount        = (meshlets[meshletIndex].mMeshIdxVcTc & 0x0000007F) >> 0u;
	uint materialIndex        = meshes[meshIndex].mMaterialIndex;
	mat4 transformationMatrix = meshes[meshIndex].mTransformationMatrix;
	bool isAnimated 		  = meshes[meshIndex].mAnimated;
	uint vertexOffset		  = meshes[meshIndex].mVertexOffset;
#if MCC_MESHLET_TYPE == _REDIR
	uint indexDataOffset	  = meshlets[meshletIndex].mDataOffset;
#endif


	//if (gl_LocalInvocationID.x == 0 && gl_WorkGroupID.x == 0)
	//	debugPrintfEXT("mli %u | mi %u | tc %u | vc %u | midxvctc %u \n", meshletIndex, meshIndex, triangleCount, vertexCount, meshlets[meshletIndex].mMeshIdxVcTc);

	
	// Step by NUM_MESH_SHADER_INVOCATIONS as we have that many threads but potentially more vertices to calculate:
	for (uint i = invocationId; i < vertexCount; i += NUM_MESH_SHADER_INVOCATIONS)
	{
		// Get the vertex index:
#if MCC_MESHLET_TYPE == _REDIR
		uint vi = uint(mPackedIndices[int(indexDataOffset + i)] + vertexOffset);	// buggy, I have to include vertexOffset in mPackedIndices
#elif MCC_MESHLET_TYPE == _NATIVE
		int vi = int(meshlets[meshletIndex].mVertices[i] + vertexOffset);
#endif
		
		vertex_data vertex = getVertexData(vi);
		vec3 posLocal = vertex.mPosition * vec3(meshes[meshIndex].mPositionNormalizationInvScale) + vec3(meshes[meshIndex].mPositionNormalizationInvTranslation);

		vec4 posMshSp = vec4(posLocal, 1.0);
		vec3 nrmMshSp = vertex.mNormal;

		if (isAnimated) {
			vec4 boneWeights = vertex.mBoneWeights;
			uvec4 boneIndices = vertex.mBoneIndices;
			posMshSp = bone_transform(
				bones[boneIndices[0]].transform, bones[boneIndices[1]].transform,
				bones[boneIndices[2]].transform, bones[boneIndices[3]].transform,
				boneWeights, posMshSp
			);
			nrmMshSp = bone_transform(
				bones[boneIndices[0]].transform, bones[boneIndices[1]].transform,
				bones[boneIndices[2]].transform, bones[boneIndices[3]].transform,
				boneWeights, nrmMshSp
			);
		}

		// Standard transformation:
		vec4 posWS = transformationMatrix * posMshSp;
		vec4 posCS = camera.mViewProjMatrix * posWS;
 
		// Set the per vertex data for the fragment shader:
		v_out[i].positionWS = posWS.xyz;
		v_out[i].normalWS = mat3(transformationMatrix) * nrmMshSp;
		v_out[i].texCoord = vertex.mTexCoord;
		v_out[i].materialIndex = int(materialIndex);
		
#if MCC_MESHLET_EXTENSION == _EXT
		v_out[i].color = color_from_id_hash(meshletIndex);
		gl_MeshVerticesEXT[i].gl_Position = posCS;
#elif MCC_MESHLET_EXTENSION == _NV
		v_out[i].color = color_from_id_hash(meshletIndex, vec3(118, 185, 0) / 255.0);
		gl_MeshVerticesNV[i].gl_Position = posCS;
#endif

	}
 
#if MCC_MESHLET_EXTENSION == _EXT && MCC_MESHLET_TYPE == _NATIVE
	SetMeshOutputsEXT(vertexCount, triangleCount);
	for (uint i = invocationId; i < triangleCount; i += NUM_MESH_SHADER_INVOCATIONS)
	{
		uvec3 meshletPrimitiveIndexList = uvec3(
			getItemFromPackedIndexArray(i * 3 + 0, meshletIndex),
			getItemFromPackedIndexArray(i * 3 + 1, meshletIndex),
			getItemFromPackedIndexArray(i * 3 + 2, meshletIndex)
		);
		gl_PrimitiveTriangleIndicesEXT[i] = meshletPrimitiveIndexList;
		//debugPrintfEXT("wrote %u | %u | %u \n", meshletPrimitiveIndexList.x, meshletPrimitiveIndexList.y, meshletPrimitiveIndexList.z);
	}

#elif MCC_MESHLET_EXTENSION == _EXT && MCC_MESHLET_TYPE == _REDIR
	SetMeshOutputsEXT(vertexCount, triangleCount);
	uint indexOffset = uint(indexDataOffset + vertexCount);
	for (uint i = invocationId; i < triangleCount; i += NUM_MESH_SHADER_INVOCATIONS)
	{
		gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
			uint(mPackedIndices_u8[int(indexOffset*4 + i*3 + 0)]),
			uint(mPackedIndices_u8[int(indexOffset*4 + i*3 + 1)]),
			uint(mPackedIndices_u8[int(indexOffset*4 + i*3 + 2)])
		);
	}

#elif MCC_MESHLET_EXTENSION == _NV && MCC_MESHLET_TYPE == _NATIVE
	if (invocationId == 0) gl_PrimitiveCountNV = triangleCount;
	uint indexGroupCount = (triangleCount * 3 + 3) / 4;
	for (uint i = invocationId; i < indexGroupCount; i += NUM_MESH_SHADER_INVOCATIONS) writePackedPrimitiveIndices4x8NV(i * 4, meshlets[meshletIndex].mIndicesPacked[int(i)]);

#elif MCC_MESHLET_EXTENSION == _NV && MCC_MESHLET_TYPE == _REDIR
	if (invocationId == 0) gl_PrimitiveCountNV = triangleCount;
	uint indexOffset = uint(indexDataOffset + vertexCount);
	uint indexGroupCount = (triangleCount * 3 + 3) / 4;
	for (uint i = invocationId; i < indexGroupCount; i += NUM_MESH_SHADER_INVOCATIONS) writePackedPrimitiveIndices4x8NV(i * 4, mPackedIndices[int(indexOffset + i)]);

#endif
} // end main()
